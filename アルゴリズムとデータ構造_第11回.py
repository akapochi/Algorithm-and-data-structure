# -*- coding: utf-8 -*-
"""アルゴリズムとデータ構造_第11回.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QCn_7J6RV_KF7kUJwxccag2lhPSUqvrO

# 0-1ナップサック問題について考える

組合せ最適化問題の典型例の一つである0-1ナップサック問題について，


*   貪欲法
*   全探索
*   動的計画法

の3つの方法について見ていく．

## アイテムリストを作る
"""

num_items = 10 # アイテム数
max_weight = 100 # 重さの最大値
max_price = 50 # 値段の最大値

from collections import namedtuple # https://docs.python.org/ja/3/library/collections.html#collections.namedtuple を参照．名前付きフィールドを持つタプルのサブクラスを作成するファクトリ関数
import random # https://docs.python.org/ja/3/library/random.html を参照


random.seed(1106)
Item = namedtuple('Item', ('name', 'weight', 'price'))

item_list = [] # アイテムのリスト（初期値として空リストを生成）

for i in range(num_items):
  weight = random.randint(1, max_weight) # 1以上max_weight以下のランダム整数値を生成
  price = random.randint(1, max_price) # 1以上max_price以下のランダム整数値を生成
  item_list.append(Item(i, weight, price)) # namedtupleであるItemを追加していく(appendはリストのメソッド．最後に要素を追加)

item_list

"""## Knapsackクラスを作る"""

class Knapsack:

  def __init__(self, limit_weight): # 初期条件記載
    self.limit_weight = limit_weight # 重量制限
    self.weight = 0 # ナップサックに入っている品物の重さ
    self.price = 0 # ナップサックに入っている品物の価値
    self.items = [] # ナップサックに入っている品物リスト

  def append(self, item): # ナップサックに品物追加
    if not self.constraint(item): # 制約条件を満足していない場合は追加しない
      raise ValueError('The item cannot be added because of the constraint.')

    self.items.append(item) # itemを追加する
    self.weight += item.weight # ナップサックに入っている品物の重さを計算（追加したitemの重さ＝item.weightを加算）
    self.price += item.price # ナップサックに入っている品物の価値を計算（追加したitemの価値＝item.priceを加算）

  def constraint(self, item): # 制約条件について記載
    return self.limit_weight >= self.weight + item.weight # itemを追加したときの重さ（もともとの重さ self.weight + itemの重さ item.weight）より重量制限のほうが髙い（制約を満たしている場合），Trueを返す．そうでない場合，Falseを返す．

  def __str__(self): # 出力
    val = 'Weight {} / Price {}'.format(self.weight, self.price)
    return val

"""## 貪欲法(Greedy)で解いてみる

価値の高い品物から先にどんどん詰め込んでいくという方針．ナップサックの重量制限を超えるまで実行
"""

def greedy(items, limit_weight):
  sorted_item_list = sorted(items, key=lambda x: x.price, reverse=True) #ラムダ式（無名関数）については　https://docs.python.org/ja/3/reference/expressions.html?highlight=lambda や https://kaityo256.github.io/python_zero/dp/index.html を参照
  in_knapsack = Knapsack(limit_weight) # in_knapsackをKnapsackクラスのオブジェクトとする．limit_weightは重量制限の値である．
  for i in sorted_item_list:

    try: # try, except については，https://docs.python.org/ja/3/tutorial/errors.html　を参照のこと．
      in_knapsack.append(i)
    except ValueError:
      continue

  return in_knapsack

knapsack_greedy = greedy(item_list, 50)

print(knapsack_greedy)
print(knapsack_greedy.items)
print(knapsack_greedy.weight)
print(knapsack_greedy.price)

"""重さあたりの価値の高い品物から先にどんどん詰め込んでいくという方針．ナップサックの重量制限を超えるまで実行"""

def greedy2(items, limit_weight):
  sorted_item_list = sorted(items, key=lambda x: x.price/x.weight, reverse=True)
  in_knapsack = Knapsack(limit_weight)
  for i in sorted_item_list:

    try:
      in_knapsack.append(i)
    except ValueError:
      continue

  return in_knapsack

knapsack_greedy2 = greedy2(item_list, 50)

print(knapsack_greedy2)
print(knapsack_greedy2.items)
print(knapsack_greedy2.weight)
print(knapsack_greedy2.price)

"""## 力づく法(Brute-Force method)で解いてみる"""

import itertools


def brute_force(items, limit_weight):
  sol_candidate = None

  for pattern in itertools.product((0, 1), repeat=len(items)): # https://docs.python.org/ja/3/library/itertools.html#itertools.product
    # print(pattern)
    tmp_items = []
    for i, val in enumerate(pattern): # https://docs.python.org/ja/3/library/functions.html#enumerate
      if val: # val == 1のとき
        tmp_items.append(items[i])
      weight = sum([item.weight for item in tmp_items])

      if weight > limit_weight:
        continue

      price = sum([item.price for item in tmp_items])
      if sol_candidate is None or price > sol_candidate.price:
        knapsack = Knapsack(limit_weight)
        for j in tmp_items:
          knapsack.append(j)

        sol_candidate = knapsack

  return sol_candidate

knapsack_bruteforce = brute_force(item_list, 50)

print(knapsack_bruteforce)
print(knapsack_bruteforce.items)
print(knapsack_bruteforce.weight)
print(knapsack_bruteforce.price)

"""## 動的計画法で解いてみる"""

def dynamic_programming(items, limit_weight):
  value_table = [[0] * (limit_weight+1) for _ in range(len(items)+1)]
  flag = [[False] * (limit_weight+1) for _ in range (len(items)+1)]

  for i in range(1, len(items)+1):
    target_item = items[i-1]
    weight = target_item.weight

    for j in range(1, limit_weight+1):
      opt_price = value_table[i-1][j]
      value_table[i][j] = opt_price
      if weight > j:
        continue

      tmp_price = value_table[i-1][j-weight]
      added_target_price = target_item.price + tmp_price
      value_table[i][j] = max(opt_price, added_target_price)
      flag[i][j] = added_target_price > opt_price # added_target_price > opt_price のとき Trueを返す．そうでないときFalseを返す．

  i = len(items)
  j = limit_weight
  in_knapsack = Knapsack(limit_weight)
  while i > 0 and j > 0:
    if flag[i][j]: # flag[i][j] == Trueのとき
      in_knapsack.append(items[i-1])
      j -= items[i-1].weight

    i -= 1

  return in_knapsack

knapsack_dp = dynamic_programming(item_list, 50)

print(knapsack_dp)
print(knapsack_dp.items)
print(knapsack_dp.weight)
print(knapsack_dp.price)

"""## 自分で問題を作ってみる"""

item_list2 = []
item_list2.append(Item('A', 2, 3)) # name, weight, priceの順
item_list2.append(Item('B', 4, 2)) # name, weight, priceの順
item_list2.append(Item('C', 3, 3)) # name, weight, priceの順
item_list2.append(Item('D', 12, 6)) # name, weight, priceの順
item_list2.append(Item('E', 9, 3)) # name, weight, priceの順
item_list2.append(Item('F', 6, 5)) # name, weight, priceの順
item_list2.append(Item('G', 3, 1)) # name, weight, priceの順
item_list2.append(Item('H', 1, 2)) # name, weight, priceの順

item_list2

knapsack_greedy2 = greedy(item_list2, 20)
print(knapsack_greedy2)
print(knapsack_greedy2.items)
print(knapsack_greedy2.weight)
print(knapsack_greedy2.price)

knapsack_greedy2_2 = greedy2(item_list2, 20)
print(knapsack_greedy2_2)
print(knapsack_greedy2_2.items)
print(knapsack_greedy2_2.weight)
print(knapsack_greedy2_2.price)

knapsack_bruteforce2 = brute_force(item_list2, 20)
print(knapsack_bruteforce2)
print(knapsack_bruteforce2.items)
print(knapsack_bruteforce2.weight)
print(knapsack_bruteforce2.price)

knapsack_dp2 = dynamic_programming(item_list2, 20)
print(knapsack_dp2)
print(knapsack_dp2.items)
print(knapsack_dp2.weight)
print(knapsack_dp2.price)

"""基礎問題1"""

item_list_ex = []
item_list_ex.append(Item(0, 19, 29)) # name, weight, priceの順
item_list_ex.append(Item(1, 20, 38)) # name, weight, priceの順
item_list_ex.append(Item(2, 4, 34)) # name, weight, priceの順
item_list_ex.append(Item(3, 27, 44)) # name, weight, priceの順
item_list_ex.append(Item(4, 21, 52)) # name, weight, priceの順
item_list_ex.append(Item(5, 1, 49)) # name, weight, priceの順
item_list_ex.append(Item(6, 28, 20)) # name, weight, priceの順
item_list_ex.append(Item(7, 30, 36)) # name, weight, priceの順

item_list_ex

knapsack_greedy_ex = greedy(item_list_ex, 65)
print(knapsack_greedy_ex)
print(knapsack_greedy_ex.items)
print(knapsack_greedy_ex.weight)
print(knapsack_greedy_ex.price)

knapsack_bruteforce_ex = brute_force(item_list_ex, 65)
print(knapsack_bruteforce_ex)
print(knapsack_bruteforce_ex.items)
print(knapsack_bruteforce_ex.weight)
print(knapsack_bruteforce_ex.price)

"""理解度確認レポート（後半）の基礎問題9"""

item_list_ex2 = []
item_list_ex2.append(Item(0, 26, 41)) # name, weight, priceの順
item_list_ex2.append(Item(1, 32, 35)) # name, weight, priceの順
item_list_ex2.append(Item(2, 30, 42)) # name, weight, priceの順
item_list_ex2.append(Item(3, 16, 43)) # name, weight, priceの順
item_list_ex2.append(Item(4, 17, 8)) # name, weight, priceの順
item_list_ex2.append(Item(5, 16, 34)) # name, weight, priceの順
item_list_ex2.append(Item(6, 9, 7)) # name, weight, priceの順
item_list_ex2.append(Item(7, 29, 36)) # name, weight, priceの順

knapsack_greedy_ex2 = greedy(item_list_ex2, 65)
print(knapsack_greedy_ex2)
print(knapsack_greedy_ex2.items)
print(knapsack_greedy_ex2.weight)
print(knapsack_greedy_ex2.price)

knapsack_greedy2_ex2 = greedy2(item_list_ex2, 65)
print(knapsack_greedy2_ex2)
print(knapsack_greedy2_ex2.items)
print(knapsack_greedy2_ex2.weight)
print(knapsack_greedy2_ex2.price)

knapsack_bruteforce_ex2 = brute_force(item_list_ex2, 65)
print(knapsack_bruteforce_ex2)
print(knapsack_bruteforce_ex2.items)
print(knapsack_bruteforce_ex2.weight)
print(knapsack_bruteforce_ex2.price)